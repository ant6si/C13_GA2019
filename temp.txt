
    /// local optimize test
    int ccount = 0;
    int time_sum_one_bit = 0;
    int time_sum_max_lg = 0;
    int score_sum_one_bit = 0;
    int score_sum_max_lg = 0;
    int iter_max = 300;
    for (int iter=0; iter<iter_max; iter++){
        Chromosome* debug_chrom = gen_chromosome(0.5, &gh);
        Chromosome* chrom_one_bit = new Chromosome();
        Chromosome* chrom_lg = new Chromosome();
        chrom_one_bit->_sequence = debug_chrom->_sequence;
        chrom_lg ->_sequence = debug_chrom->_sequence;

//    cout<<(debug_chrom->_score)<<"/ "<<(debug_chrom->_sequence)<<endl;
        int st1 = time(NULL);
        local_optimize_one_chrom(chrom_one_bit, &gh);
        time_sum_one_bit += time(NULL)-st1;

        gh.compute_score(chrom_one_bit);
        int st2 = time(NULL);
        max_locked_gain(chrom_lg, &gh);
        time_sum_max_lg += time(NULL)-st2;

        gh.compute_score(chrom_lg);

        score_sum_one_bit += chrom_one_bit->_score;
        score_sum_max_lg += chrom_lg->_score;


        cout<< "Locked > Onebit: "<<(chrom_lg->_score > chrom_one_bit->_score)<< "/ locked: "<<chrom_lg->_score<<" / one bit: "<<chrom_one_bit->_score<<endl;
        if (chrom_lg->_score > chrom_one_bit->_score){
            ccount++;
        }
        delete debug_chrom;
        delete chrom_one_bit;
        delete chrom_lg;
    }
    cout<< "Good count: "<<ccount<<endl;
    float avg_time_ob = time_sum_one_bit / float(iter_max);
    float avg_time_ml = time_sum_max_lg / float(iter_max);
    float avg_sum_ob = score_sum_one_bit / float(iter_max);
    float avg_sum_ml = score_sum_max_lg / float(iter_max);

    cout<<  avg_time_ob << "\t" << avg_time_ml  << "\t" << avg_sum_ob  << "\t" << avg_sum_ml << endl;


/*
    ///FOR SUBMISSION
    string input_file = "maxcut.in";
    string output_file = "maxcut.out";
    ofstream file_out;
    file_out.open(output_file.c_str());
    do_GA_1(input_file, file_out);

    //printVec(population);
    //maxout 에 인덱스 1더하기!!!
*/



///Local_optimization
void do_MS_local_opt(string input_file, ofstream &file_out) {
//    srand((unsigned int)time(0));
    time_t st = time(NULL);
    GraphHandler gh = GraphHandler(input_file);

//    gh.print();
    vector<Chromosome *> *population = new vector<Chromosome *>();
    MAX_NUM = gh.get_V();
    TIME_LIMIT = 500 * (MAX_NUM/3000) -3;
    cout << "TIME_LIMIT: " <<TIME_LIMIT <<endl;
    gen_population_uniform(population, &gh);
//    printVec(population);

//    gen_population_various(population, &gh);
    sort(population->begin(), population->end(), compare);
    time_t remain = TIME_LIMIT - (time(NULL) - st);
    int total_best = -999999999;
    int best_score = -999999999;
    int epoch = 0;
    /// Local opt start

    while (remain > 0) {
        delete (population);
        vector<Chromosome *> *population = new vector<Chromosome *>();
        //local optimization
        gen_population_uniform(population, &gh);
//        printVec(population);
        sort(population->begin(), population->end(), compare);
        int before_best = get_best_score(population);
        do_local_optimize(population, &gh);
        sort(population->begin(), population->end(), compare);

        // print best
        best_score = get_best_score(population);

        if (total_best < best_score) {
            total_best = best_score;
//            cout<<total_best<<endl;
        }

        epoch++;
        //if (true){
        if (true) {
            cout << "time:" << (time(NULL) - st) << "/ epoch: " << epoch << "/ before best: " << before_best
                 << "/ best_score: " << best_score << endl;
            //cout<<best_score<<endl;
        }
        remain = TIME_LIMIT - (time(NULL) - st);
    }

    file_out << total_best << endl;
//    file_out<< "time:"<<(time(NULL)-st)<<"/ epoch: " << epoch << "/ best_score: "<< best_score<<"/ converge: "<< last_converge <<endl;

//printVec(population);
}



//
//    sort(population->begin(), population->end(), compare);
//    Chromosome *champ = population->back();
//    file_out << (champ->_score) << endl;
//    file_out<< "time:"<<(time(NULL)-st)<<"/ epoch: " << epoch << "/ best_score: "<< best_score<<"/ converge: "<< last_converge <<endl;
/* For submission
    sort( population->begin(), population->end(), compare);
    Chromosome* champ = population->back();
    bitset<L> champ_seq = champ->_sequence;

    vector<int>* champ_vec = new vector<int>();

    for(int x=0; x<MAX_NUM; x++){
        if(champ_seq[x]==0){
            champ_vec->push_back((x+1));
        }
    }
    vector<int>::iterator iter;
    iter = champ_vec->begin();
    file_out<<(*iter);
    iter++;
    for(; iter != champ_vec->end(); iter++){
        file_out<<" "<< (*iter);
    }
    delete champ_vec;
*/
//printVec(population);





void do_islancd_GA_1(string input_file, ofstream &file_out) {
//    srand(time(NULL));
    time_t st = time(NULL);
    GraphHandler gh = GraphHandler(input_file);

//    gh.print();
    vector<Chromosome *> *population1 = new vector<Chromosome *>();
    vector<Chromosome *> *population2 = new vector<Chromosome *>();
//    vector<Chromosome *> *population3 = new vector<Chromosome *>();
//    vector<Chromosome *> *population4 = new vector<Chromosome *>();
//    vector<Chromosome *> *population5 = new vector<Chromosome *>();

MAX_NUM = gh.get_V();
    TIME_LIMIT = int( 500 * (MAX_NUM/3000.0)) -3;
//    cout << "TIME_LIMIT: " <<TIME_LIMIT <<endl;
    gen_population_uniform(population1, &gh);
    gen_population_uniform(population2, &gh);
//    gen_population_uniform(population3, &gh);
//    gen_population_uniform(population4, &gh);
//    gen_population_uniform(population5, &gh);

    time_t remain = TIME_LIMIT - (time(NULL) - st);
    int total_best = -999999999;
    int best_score = -999999999;
    int epoch = 1;
    int xover_per_generation = int(POPULATION_SIZE * XOVER_RATIO);
    ///GA Start
    while (remain > 0) {
        do_one_generation(population1, &gh);
        do_one_generation(population2, &gh);
//        do_one_generation(population3, &gh);
//        do_one_generation(population4, &gh);
//        do_one_generation(population5, &gh);

        // print best
        Chromosome* best_chrom;
        best_chrom = get_best_in_all_island(population1, population2,&gh);
//        best_chrom = get_best_in_all_island(population1, population2,population3,population4,population5, &gh);
        best_score = best_chrom->_score;
        delete(best_chrom);
/*
        if (epoch %10 == 0){
            cout << (time(NULL)-st)<< "\t\t" <<epoch << "\t\t" <<best_score<<endl;
            cout <<"POP1: ";
            print_population_status(population1);
            cout <<"POP2: ";
            print_population_status(population2);
//            cout <<"POP3: ";
//            print_population_status(population3);
//            cout <<"POP4: ";
//            print_population_status(population4);
//            cout <<"POP5: ";
//            print_population_status(population5);
  //          cout<<endl;
        }
*/
        if (epoch % 30 == 0){
            /// Apply max-lg to best champ for each island
//            max_locked_gain(population1->back(), &gh);
//            max_locked_gain(population2->back(), &gh);
//            max_locked_gain(population3->back(), &gh);
//            max_locked_gain(population4->back(), &gh);
//            max_locked_gain(population5->back(), &gh);

            /// Interchange chromosome between island
 //           cout<<"move!!!"<<endl;
            move_best_to_neighbor(population1, population2);
            move_best_to_neighbor(population2, population1);
//            move_best_to_neighbor(population2, population3);

//            move_best_to_neighbor(population3, population4);
//            move_best_to_neighbor(population4, population5);
//            move_best_to_neighbor(population5, population1);
        }

        if (total_best < best_score) {
            total_best = best_score;
        }
        epoch++;
        /*
        float converge = how_converge(population);
        //if (true){
        if (epoch % 10 == 0) {
            int ws = get_worst_score(population);
            int ms = get_median_score(population);
//            cout << "time:" << (time(NULL) - st) << "/ epoch: " << epoch << "/ best_score: " << best_score
//                 << "/ median_score: " << ms << "/ worst_score: " << ws << "/ converge: " << converge << endl;
//            file_out<< "time:"<<(time(NULL)-st)<<"/ epoch: " << epoch <<"/ best_score: "<< best_score<<"/ worst_score: "<< ws<<"/ median_score: "<< ms<<"/ converge: "<< converge <<endl;
            //cout<<best_score<<endl;
        }
         */
        remain = TIME_LIMIT - (time(NULL) - st);

    }
    float conv1 = how_converge(population1);
    float conv2 = how_converge(population2);
    cout << epoch << "\t\t" << total_best << "\t\t"<< conv1 << "\t\t"<< conv2 <<endl;

    delete(population1);
    delete(population2);
}

